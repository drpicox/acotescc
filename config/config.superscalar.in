[cellss-ppu-cc]
language = C
options = --variable=generate-non-task-side:yes --variable=generate-task-side:no --variable=align-memory:yes
preprocessor_name = ppu-c99
preprocessor_options = -E -m32 -I@prefix@/include -include CellSS.h -DPPU_CODE -maltivec 
compiler_name = ppu-c99
compiler_options = -g3 -m32 -maltivec
linker_name = ppu-g++
linker_options = -g3 -m32 -L@prefix@/lib -lCellSS -lspe2 -lpthread
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css

[cellss-spu-cc]
language = C
options = --variable=generate-non-task-side:no --variable=generate-task-side:yes --variable=align-memory:yes
preprocessor_name = spu-c99
preprocessor_options = -E -I@prefix@/include -include CellSS.h -DSPU_CODE
compiler_name = spu-c99
compiler_options = -g3
linker_name = spu-c99
linker_options = -g3 -L@prefix@/lib -lCellSS-spu
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css

[smpss-cc]
language = C
options = --variable=generate-non-task-side:yes --variable=generate-task-side:yes --variable=align-memory:no
preprocessor_name = c99
preprocessor_options = -E -I@prefix@/include -include CellSS.h 
compiler_name = c99
compiler_options = -g3
linker_name = g++
linker_options = -g3 -L@prefix@/lib -lSMPSS -lpthread
compiler_phase = libtlsuperscalar-configurator.so
compiler_phase = libtlsuperscalar-preanalysis.so
compiler_phase = libtlsuperscalar-task-analysis.so
compiler_phase = libtlsuperscalar-function-router.so
compiler_phase = libtlsuperscalar-transform-directives.so
compiler_phase = libtlsuperscalar-code-conversion.so
compiler_phase = libtlsuperscalar-task-manifest.so
pragma_prefix = css
